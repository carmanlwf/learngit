#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="NiceFood_DB")]
public partial class NiceFoodDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertbatch_charagelist(batch_charagelist instance);
  partial void Updatebatch_charagelist(batch_charagelist instance);
  partial void Deletebatch_charagelist(batch_charagelist instance);
  partial void Insertbatch_operator(batch_operator instance);
  partial void Updatebatch_operator(batch_operator instance);
  partial void Deletebatch_operator(batch_operator instance);
  #endregion
	
	public NiceFoodDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NiceFood_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public NiceFoodDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NiceFoodDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NiceFoodDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NiceFoodDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<batch_charagelist> batch_charagelist
	{
		get
		{
			return this.GetTable<batch_charagelist>();
		}
	}
	
	public System.Data.Linq.Table<batch_operator> batch_operator
	{
		get
		{
			return this.GetTable<batch_operator>();
		}
	}
}

[Table(Name="dbo.batch_charagelist")]
public partial class batch_charagelist : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _transno;
	
	private string _operatorid;
	
	private System.Nullable<decimal> _sumtime;
	
	private System.Nullable<decimal> _amount_CZ;
	
	private System.Nullable<decimal> _amount_TK;
	
	private System.Nullable<int> _count_CZ;
	
	private System.Nullable<int> _count_TK;
	
	private System.Nullable<System.DateTime> _logtime;
	
	private System.Nullable<bool> _flag;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntransnoChanging(string value);
    partial void OntransnoChanged();
    partial void OnoperatoridChanging(string value);
    partial void OnoperatoridChanged();
    partial void OnsumtimeChanging(System.Nullable<decimal> value);
    partial void OnsumtimeChanged();
    partial void Onamount_CZChanging(System.Nullable<decimal> value);
    partial void Onamount_CZChanged();
    partial void Onamount_TKChanging(System.Nullable<decimal> value);
    partial void Onamount_TKChanged();
    partial void Oncount_CZChanging(System.Nullable<int> value);
    partial void Oncount_CZChanged();
    partial void Oncount_TKChanging(System.Nullable<int> value);
    partial void Oncount_TKChanged();
    partial void OnlogtimeChanging(System.Nullable<System.DateTime> value);
    partial void OnlogtimeChanged();
    partial void OnflagChanging(System.Nullable<bool> value);
    partial void OnflagChanged();
    #endregion
	
	public batch_charagelist()
	{
		OnCreated();
	}
	
	[Column(Storage="_transno", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string transno
	{
		get
		{
			return this._transno;
		}
		set
		{
			if ((this._transno != value))
			{
				this.OntransnoChanging(value);
				this.SendPropertyChanging();
				this._transno = value;
				this.SendPropertyChanged("transno");
				this.OntransnoChanged();
			}
		}
	}
	
	[Column(Storage="_operatorid", DbType="VarChar(10)")]
	public string operatorid
	{
		get
		{
			return this._operatorid;
		}
		set
		{
			if ((this._operatorid != value))
			{
				this.OnoperatoridChanging(value);
				this.SendPropertyChanging();
				this._operatorid = value;
				this.SendPropertyChanged("operatorid");
				this.OnoperatoridChanged();
			}
		}
	}
	
	[Column(Storage="_sumtime", DbType="Decimal(3,2)")]
	public System.Nullable<decimal> sumtime
	{
		get
		{
			return this._sumtime;
		}
		set
		{
			if ((this._sumtime != value))
			{
				this.OnsumtimeChanging(value);
				this.SendPropertyChanging();
				this._sumtime = value;
				this.SendPropertyChanged("sumtime");
				this.OnsumtimeChanged();
			}
		}
	}
	
	[Column(Storage="_amount_CZ", DbType="Decimal(10,2)")]
	public System.Nullable<decimal> amount_CZ
	{
		get
		{
			return this._amount_CZ;
		}
		set
		{
			if ((this._amount_CZ != value))
			{
				this.Onamount_CZChanging(value);
				this.SendPropertyChanging();
				this._amount_CZ = value;
				this.SendPropertyChanged("amount_CZ");
				this.Onamount_CZChanged();
			}
		}
	}
	
	[Column(Storage="_amount_TK", DbType="Decimal(10,2)")]
	public System.Nullable<decimal> amount_TK
	{
		get
		{
			return this._amount_TK;
		}
		set
		{
			if ((this._amount_TK != value))
			{
				this.Onamount_TKChanging(value);
				this.SendPropertyChanging();
				this._amount_TK = value;
				this.SendPropertyChanged("amount_TK");
				this.Onamount_TKChanged();
			}
		}
	}
	
	[Column(Storage="_count_CZ", DbType="Int")]
	public System.Nullable<int> count_CZ
	{
		get
		{
			return this._count_CZ;
		}
		set
		{
			if ((this._count_CZ != value))
			{
				this.Oncount_CZChanging(value);
				this.SendPropertyChanging();
				this._count_CZ = value;
				this.SendPropertyChanged("count_CZ");
				this.Oncount_CZChanged();
			}
		}
	}
	
	[Column(Storage="_count_TK", DbType="Int")]
	public System.Nullable<int> count_TK
	{
		get
		{
			return this._count_TK;
		}
		set
		{
			if ((this._count_TK != value))
			{
				this.Oncount_TKChanging(value);
				this.SendPropertyChanging();
				this._count_TK = value;
				this.SendPropertyChanged("count_TK");
				this.Oncount_TKChanged();
			}
		}
	}
	
	[Column(Storage="_logtime", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> logtime
	{
		get
		{
			return this._logtime;
		}
		set
		{
			if ((this._logtime != value))
			{
				this.OnlogtimeChanging(value);
				this.SendPropertyChanging();
				this._logtime = value;
				this.SendPropertyChanged("logtime");
				this.OnlogtimeChanged();
			}
		}
	}
	
	[Column(Storage="_flag", DbType="Bit")]
	public System.Nullable<bool> flag
	{
		get
		{
			return this._flag;
		}
		set
		{
			if ((this._flag != value))
			{
				this.OnflagChanging(value);
				this.SendPropertyChanging();
				this._flag = value;
				this.SendPropertyChanged("flag");
				this.OnflagChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.batch_operator")]
public partial class batch_operator : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _transid;
	
	private string _starttime;
	
	private string _operatorid;
	
	private System.Nullable<bool> _status;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntransidChanging(string value);
    partial void OntransidChanged();
    partial void OnstarttimeChanging(string value);
    partial void OnstarttimeChanged();
    partial void OnoperatoridChanging(string value);
    partial void OnoperatoridChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
	
	public batch_operator()
	{
		OnCreated();
	}
	
	[Column(Storage="_transid", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string transid
	{
		get
		{
			return this._transid;
		}
		set
		{
			if ((this._transid != value))
			{
				this.OntransidChanging(value);
				this.SendPropertyChanging();
				this._transid = value;
				this.SendPropertyChanged("transid");
				this.OntransidChanged();
			}
		}
	}
	
	[Column(Storage="_starttime", DbType="VarChar(30)")]
	public string starttime
	{
		get
		{
			return this._starttime;
		}
		set
		{
			if ((this._starttime != value))
			{
				this.OnstarttimeChanging(value);
				this.SendPropertyChanging();
				this._starttime = value;
				this.SendPropertyChanged("starttime");
				this.OnstarttimeChanged();
			}
		}
	}
	
	[Column(Storage="_operatorid", DbType="VarChar(10)")]
	public string operatorid
	{
		get
		{
			return this._operatorid;
		}
		set
		{
			if ((this._operatorid != value))
			{
				this.OnoperatoridChanging(value);
				this.SendPropertyChanging();
				this._operatorid = value;
				this.SendPropertyChanged("operatorid");
				this.OnoperatoridChanged();
			}
		}
	}
	
	[Column(Storage="_status", DbType="Bit")]
	public System.Nullable<bool> status
	{
		get
		{
			return this._status;
		}
		set
		{
			if ((this._status != value))
			{
				this.OnstatusChanging(value);
				this.SendPropertyChanging();
				this._status = value;
				this.SendPropertyChanged("status");
				this.OnstatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
